"use strict";(self.webpackChunkglasskube_docs=self.webpackChunkglasskube_docs||[]).push([[2909],{63744:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var s=a(74848),i=a(28453);const t={},o="Package Configuration",l={id:"design/package-config",title:"Package Configuration",description:"Problem analysis",source:"@site/docs/05_design/package-config.md",sourceDirName:"05_design",slug:"/design/package-config",permalink:"/TP2024-T5/docs/design/package-config",draft:!1,unlisted:!1,editUrl:"https://github.com/EvilFlowersCatalog/TP2024-T5/tree/main/docs/05_design/package-config.md",tags:[],version:"current",frontMatter:{}},r={},c=[{value:"Problem analysis",id:"problem-analysis",level:2},{value:"What values are available for a given package",id:"what-values-are-available-for-a-given-package",level:3},{value:"How does a value affect the deployed package resources",id:"how-does-a-value-affect-the-deployed-package-resources",level:3},{value:"How does a value affect the deployed package resources",id:"how-does-a-value-affect-the-deployed-package-resources-1",level:3},{value:"Design proposal",id:"design-proposal",level:2},{value:"Examples",id:"examples",level:2},{value:"Known Limitations/caveats",id:"known-limitationscaveats",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"package-configuration",children:"Package Configuration"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-analysis",children:"Problem analysis"}),"\n",(0,s.jsx)(n.p,{children:"At Glasskube, what we mean when we talk about package configuration, is a controlled alteration of the resources that are part of a package depending on values specified by the user.\nThis can be thought of as three sub-problems:"}),"\n",(0,s.jsx)(n.h3,{id:"what-values-are-available-for-a-given-package",children:"What values are available for a given package"}),"\n",(0,s.jsxs)(n.p,{children:["The author of a package may include a declaration of the possible configuration items in the package manifest, where each package may have multiple ",(0,s.jsx)(n.strong,{children:"value definitions"}),".\nA value definition contains information to help clients display an appropriate form item for data entry and constraints to be validated by the client as well as the package operator."]}),"\n",(0,s.jsx)(n.h3,{id:"how-does-a-value-affect-the-deployed-package-resources",children:"How does a value affect the deployed package resources"}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, a value definition describes some alterations to the deployed package.\nWe call those alterations ",(0,s.jsx)(n.strong,{children:"targets"}),".\nEach value definition may contain a number of targets.\nA target can be one of two things:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"A change to the default values of a helm release contained in the package"}),"\n",(0,s.jsxs)(n.li,{children:["A JSON patch that should be applied to a resource contained in a ",(0,s.jsx)(n.code,{children:"manifests"})," entry of the package"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"how-does-a-value-affect-the-deployed-package-resources-1",children:"How does a value affect the deployed package resources"}),"\n",(0,s.jsxs)(n.p,{children:["A user, when installing a package using Glasskube, may declare a ",(0,s.jsx)(n.strong,{children:"value configuration"})," for each value definition of that package.\nA value configuration can hold either a ",(0,s.jsx)(n.strong,{children:"literal value"})," or a ",(0,s.jsx)(n.strong,{children:"reference value"}),".\nLiteral values represent a simple value (e.g. a string entered via a text field).\nReference values represent references to values in other resources in the same Kubernetes cluster.\nSuch references can be secrets, configmaps or other packages."]}),"\n",(0,s.jsx)(n.p,{children:"Values are non-mandatory by default, however, a package author may opt to make any of their packages values required by\nspecifying a constraint on that value definition.\nIf a package has no value configuration for a given value definition that is non-mandatory, that values targets will not be\napplied and it is the package authors responsibility to ensure that their package also works in this case."}),"\n",(0,s.jsx)(n.h2,{id:"design-proposal",children:"Design proposal"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"PackageManifest"})," has a property ",(0,s.jsx)(n.code,{children:"Values"})," of type ",(0,s.jsx)(n.code,{children:"map[string]ValueDefinition"}),".\nThe key in this map is referred to as that values ",(0,s.jsx)(n.strong,{children:"name"}),"\n",(0,s.jsx)(n.code,{children:"ValueDefinition"})," is a struct with the following properties:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Type"})})," (",(0,s.jsx)(n.code,{children:"string"})," enum):\nEvery value must have a type, so that we know what kind of input field to show for this value.\nInitially, this can be one of ",(0,s.jsx)(n.code,{children:"boolean"}),", ",(0,s.jsx)(n.code,{children:"options"}),", ",(0,s.jsx)(n.code,{children:"text"}),", ",(0,s.jsx)(n.code,{children:"number"})," but it is possible to add more types in future releases."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Metadata"})}),":\nA colletion of (mostly) UI-related metadata with the following (optional) properties:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Label"})})," (",(0,s.jsx)(n.code,{children:"string"}),"):\nThe label is used to denote an input field related to this value in a UI.\nBy default the name of the value should be used."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Description"})})," (",(0,s.jsx)(n.code,{children:"string"}),"):\nThe description can be used to give more context to a value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Hints"})})," (",(0,s.jsx)(n.code,{children:"string"}),' enum):\nHints offer package maintainers the ability to make some elements of the UI more prominent.\nFor example, every value can be set to reference the value of a secret key, but if a value has the\n"SuggestSecretRef" hint, this option can be highlighted by the UI or enabled by default.\n',(0,s.jsx)(n.em,{children:"Available hints and whether they will be included in the initial release is TBD"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DefaultValue"})})," (",(0,s.jsx)(n.code,{children:"string"}),"):\nThe default value is pre-selected/pre-filled in the form field of this value for new packages."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Options"})})," (",(0,s.jsx)(n.code,{children:"[]string"}),"):\nAvailable choices for values of type options.\nShould be ignored for other types."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Constraints"})}),":\nSpecifying a number of constraints is possible.\nAvailable constraints are\n",(0,s.jsx)(n.code,{children:"Required"})," (",(0,s.jsx)(n.code,{children:"bool"}),"), ",(0,s.jsx)(n.code,{children:"Min"})," (",(0,s.jsx)(n.code,{children:"int"}),"), ",(0,s.jsx)(n.code,{children:"Max"})," (",(0,s.jsx)(n.code,{children:"int"}),"), ",(0,s.jsx)(n.code,{children:"MinLength"})," (",(0,s.jsx)(n.code,{children:"int"}),"), ",(0,s.jsx)(n.code,{children:"MaxLength"})," (",(0,s.jsx)(n.code,{children:"int"}),"), ",(0,s.jsx)(n.code,{children:"Pattern"})," (",(0,s.jsx)(n.code,{children:"string"}),').\nThese should be checked by the UI, as well as by the validating webhook.\nNot all constrains apply to all types of value. Non-applicable constraints are ignored.\nFor example a "text" value with constraints.max = 3 is the same as a "text" value with no constraints.']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Targets"})}),":\nWhere to apply this value.\nEither the name of a helm chart, or a ",(0,s.jsx)(n.code,{children:"TypedObjectReference"})," combined with patch information.\nInitially, the idea is to use RFC 6902 JSON patches but this is still TBD.\nWe use Unstructured for plain resources, which already supports setting values via a kind of JSON path,\nbut it does not support setting values in lists.\nSo, for example, it would not be possible to change something in the container of a deployment, since the containers are a list.\nMaybe ",(0,s.jsx)(n.a,{href:"https://github.com/evanphx/json-patch",children:"evanphx/json-patch"})," can be a useful alternative, but it only works on byte slices."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"PackageSpec"})," has a property ",(0,s.jsx)(n.code,{children:"Values"})," of type ",(0,s.jsx)(n.code,{children:"map[string]ValueConfiguration"}),".\nThe key in this map used to identify the corresponding ",(0,s.jsx)(n.code,{children:"ValueDefinition"})," with the same name in the ",(0,s.jsx)(n.code,{children:"PackageManifest"}),"s ",(0,s.jsx)(n.code,{children:"Values"})," map.\nA ",(0,s.jsx)(n.code,{children:"ValueConfiguration"})," must have exactly one of the following properties:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Value"})}),":\nA literal value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ValueFrom"})}),":\nTo represent a reference value. ",(0,s.jsx)(n.code,{children:"ValueFrom"})," must have exactly one of the following properties:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ConfigMapRef"})}),":\nTo reference a ",(0,s.jsx)(n.code,{children:"Key"})," of a ConfigMap with ",(0,s.jsx)(n.code,{children:"Name"})," in ",(0,s.jsx)(n.code,{children:"Namespace"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"SecretRef"})}),":\nTo reference a ",(0,s.jsx)(n.code,{children:"Key"})," of a Secret with ",(0,s.jsx)(n.code,{children:"Name"})," in ",(0,s.jsx)(n.code,{children:"Namespace"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"PackageRef"})}),":\nTo reference the value of the ",(0,s.jsx)(n.code,{children:"ValueConfiguration"})," with name ",(0,s.jsx)(n.code,{children:"Value"})," of a package with ",(0,s.jsx)(n.code,{children:"Name"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="PackageManifest with a simple value specification"',children:"name: foo\nhelm:\n  repositoryUrl: 'https://charts.example.com'\n  chartName: 'foo'\n  chartVersion: 'v1.0.0'\n  values: {}\nvalueDefinitions:\n  ingress:\n    type: 'boolean'\n    label: 'Enable Ingress'\n    description: 'Whether an ingress resource should be created for this Package'\n    defaultValue: 'true'\n    targets:\n      - chartName: 'foo'\n        patch:\n          - op: 'add'\n            path: 'ingress/enabled'\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="PackageManifest with a value specification that has multiple targets"',children:"name: foo\nvalueDefinitions:\n  host:\n    type: 'text'\n    constraints:\n      required: true\n    targets:\n      - resource:\n          kind: 'Ingress'\n          apiVersion: 'networking.k8s.io/v1'\n          name: 'foo'\n          namespace: 'foo'\n        patch:\n          - op: 'add'\n            path: '/spec/rules/0/host'\n          - op: 'add'\n            path: '/spec/tls/0/hosts/-'\n      - resource:\n          apiVersion: 'apps/v1'\n          kind: 'Deployment'\n          name: 'foo'\n          namespace: 'foo'\n        patch:\n          - op: 'add'\n            path: '/spec/template/spec/containers/0/env/-'\n        valueTemplate: |\n          { \"name\": \"APP_HOST\", \"value\": \"{{ .value }}\" }\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="Package with a variety of value configurations"',children:"apiVersion: 'packages.glasskube.dev/v1alpha1'\nkind: 'Package'\nmetadata:\n  name: 'foo'\nspec:\n  packageInfo:\n    name: 'foo'\n    version: 'v1.0.0'\n  values:\n    ingress:\n      value: 'false'\n    host:\n      valueFrom:\n        configMapRef:\n          name: 'foo-prod-config'\n          value: 'host'\n    apiKey:\n      valueFrom:\n        secretRef:\n          name: 'api-key-secret'\n          key: 'apiKey'\n"})}),"\n",(0,s.jsx)(n.h2,{id:"known-limitationscaveats",children:"Known Limitations/caveats"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Value configurations can not have list types"}),"\n",(0,s.jsx)(n.li,{children:"More possibilities for deadlocks with required values that reference other packages"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>l});var s=a(96540);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);