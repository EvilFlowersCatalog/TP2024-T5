"use strict";(self.webpackChunkglasskube_docs=self.webpackChunkglasskube_docs||[]).push([[3955],{13241:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>h,toc:()=>d});var n=i(74848),r=i(28453),o=i(24401),s=i(51852);const a={title:"The guide to Git I never had.",slug:"git",description:"Learn how to use git with commands for commiting, branching, rebasing and squashing",authors:["jpage"],tags:["git"]},c="The guide to Git I never had.",h={id:"git-guide",title:"The guide to Git I never had.",description:"Learn how to use git with commands for commiting, branching, rebasing and squashing",source:"@site/guides/03_git-guide.mdx",sourceDirName:".",slug:"/git",permalink:"/TP2024-T5/guides/git",draft:!1,unlisted:!1,tags:[{inline:!0,label:"git",permalink:"/TP2024-T5/guides/tags/git"}],version:"current",lastUpdatedBy:"RobertPrikryl",lastUpdatedAt:1728147151e3,sidebarPosition:3,frontMatter:{title:"The guide to Git I never had.",slug:"git",description:"Learn how to use git with commands for commiting, branching, rebasing and squashing",authors:["jpage"],tags:["git"]},sidebar:"guides",previous:{title:"Contributor Guides",permalink:"/TP2024-T5/guides/categories/contributors"},next:{title:"The guide to kubectl I never had.",permalink:"/TP2024-T5/guides/kubectl"}},l={},d=[{value:"While we are on the topic",id:"while-we-are-on-the-topic",level:2},{value:"Let\u2019s lay down the foundations",id:"lets-lay-down-the-foundations",level:2},{value:"Branches",id:"branches",level:3},{value:"Commits",id:"commits",level:3},{value:"Tags",id:"tags",level:3},{value:"HEAD",id:"head",level:3},{value:"Stages",id:"stages",level:3},{value:"Working directory \ud83d\udc77",id:"working-directory-",level:4},{value:"Staging area \ud83d\ude89",id:"staging-area-",level:4},{value:"Local repository \ud83d\uddc4\ufe0f",id:"local-repository-\ufe0f",level:4},{value:"Remote repository \ud83d\udeeb",id:"remote-repository-",level:4},{value:"Getting Started with Git",id:"getting-started-with-git",level:2},{value:"Credentials set up",id:"credentials-set-up",level:3},{value:"Working with branches",id:"working-with-branches",level:3},{value:"Working with commits",id:"working-with-commits",level:3},{value:"Manipulating History",id:"manipulating-history",level:2},{value:"Rebasing and merging",id:"rebasing-and-merging",level:3},{value:"Squashing",id:"squashing",level:3},{value:"Cherry-picking",id:"cherry-picking",level:3},{value:"Advanced Git Commands",id:"advanced-git-commands",level:2},{value:"Signing commits",id:"signing-commits",level:3},{value:"Git reflog",id:"git-reflog",level:3},{value:"Interactive rebase",id:"interactive-rebase",level:3},{value:"Collaborating with Git",id:"collaborating-with-git",level:2},{value:"Origin vs Upstream",id:"origin-vs-upstream",level:3},{value:"Conflicts",id:"conflicts",level:3},{value:"Popular Git workflows",id:"popular-git-workflows",level:2},{value:"Feature Branch Workflow \ud83c\udf31",id:"feature-branch-workflow-",level:3},{value:"Gitflow Workflow \ud83c\udf0a",id:"gitflow-workflow-",level:3},{value:"Forking Workflow \ud83c\udf74",id:"forking-workflow-",level:3},{value:"Trunk-Based Development \ud83e\udeb5",id:"trunk-based-development-",level:3},{value:"What the fork?",id:"what-the-fork",level:3},{value:"Git Cheatsheet",id:"git-cheatsheet",level:2},{value:"Bonus! Some Git tools and resources to make your life easier.",id:"bonus-some-git-tools-and-resources-to-make-your-life-easier",level:2}];function g(e){const t={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"the-guide-to-git-i-never-had",children:"The guide to Git I never had."})}),"\n",(0,n.jsxs)(t.p,{children:["\ud83e\ude7a Doctors have stethoscopes. ",(0,n.jsx)(t.br,{}),"\n","\ud83d\udd27 Mechanics have spanners. ",(0,n.jsx)(t.br,{}),"\n","\ud83d\udc68\u200d\ud83d\udcbb We developers, have Git."]}),"\n",(0,n.jsx)(t.p,{children:"Have you noticed that Git is so integral to working with code that people hardly ever include it in their tech stack or on their CV at all? The assumption is you know it already, or at least enough to get by, but do you?"}),"\n",(0,n.jsx)(t.p,{children:"Git is a Version Control System (VCS). The ubiquitous technology that enables us to store, change, and collaborate on code with others."}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["\ud83d\udea8 As a disclaimer, I would like to point out that Git is a massive topic. Git books have been written, and blog posts that could be mistaken for academic papers too. That's not what I\u2019m going for here. ",(0,n.jsx)(t.strong,{children:"I'm no Git expert"}),". My aim here is to write the Git fundamentals post I wish I had when learning Git."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"As developers, our daily routine revolves around reading, writing, and reviewing code. Git is arguably one of the most important tools we use. Mastering the features and functionalities Git offers is one of the best investments you can make in yourself as a developer."}),"\n",(0,n.jsx)(t.p,{children:"So let\u2019s get started"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"If you feel I missed or should go into more detail on a specific command, let me know in the comments below. And I will update this post accordingly. \ud83d\ude4f"}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"while-we-are-on-the-topic",children:"While we are on the topic"}),"\n",(0,n.jsx)(t.p,{children:"If you are looking to put your Git skills to work and would like to contribute to Glasskube, we officially launched in February and we aim to be the no-brainer, default solution for Kubernetes package management. With your support, we can make it happen. The best way to show your support is by starring us on GitHub \u2b50"}),"\n",(0,n.jsx)("div",{style:{display:"flex",justifyContent:"left"},children:(0,n.jsx)(o.A,{href:"https://github.com/glasskube/glasskube"})}),"\n",(0,n.jsx)(t.h2,{id:"lets-lay-down-the-foundations",children:"Let\u2019s lay down the foundations"}),"\n",(0,n.jsx)(t.p,{children:"Does Git ever make you feel like Peter Griffin?\r\nIf you don\u2019t learn Git the right way you run the risk of constantly scratching your head, getting stuck on the same issues, or rueing the day you see another merge conflict appear in your terminal. Let's ensure that doesn\u2019t happen by defining some foundational Git concepts."}),"\n",(0,n.jsx)(t.h3,{id:"branches",children:"Branches"}),"\n",(0,n.jsxs)(t.p,{children:['In a Git repository, you\'ll find a main line of development, typically named "main" or "master" (',(0,n.jsx)(t.a,{href:"https://github.blog/changelog/2020-10-01-the-default-branch-for-newly-created-repositories-is-now-main/",children:"deprecated"}),") from which several ",(0,n.jsx)(t.a,{href:"https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell",children:"branches"})," diverge. These branches represent simultaneous streams of work, enabling developers to tackle multiple features or fixes concurrently within the same project."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3p5q80hldckku20urm0.png",alt:"Git branches"})}),"\n",(0,n.jsx)(t.h3,{id:"commits",children:"Commits"}),"\n",(0,n.jsx)(t.p,{children:"Git commits serve as bundles of updated code, capturing a snapshot of the project's code at a specific point in time. Each commit records changes made since the last commit was recorded, all together building a comprehensive history of the project's development journey."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcjp286j11bqkx0k9w35.png",alt:"Git commits"})}),"\n",(0,n.jsxs)(t.p,{children:["When referencing commits you will generally use its uniquely identified cryptographic ",(0,n.jsx)(t.a,{href:"https://www.mikestreety.co.uk/blog/the-git-commit-hash/",children:"hash"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"git show abc123def456789\n"})}),"\n",(0,n.jsx)(t.p,{children:"This shows detailed information about the commit with that hash."}),"\n",(0,n.jsx)(t.h3,{id:"tags",children:"Tags"}),"\n",(0,n.jsxs)(t.p,{children:["Git ",(0,n.jsx)(t.a,{href:"https://git-scm.com/book/en/v2/Git-Basics-Tagging",children:"tags"})," serve as landmarks within the Git history, typically marking significant milestones in a project's development, such as ",(0,n.jsx)(t.code,{children:"releases"}),", ",(0,n.jsx)(t.code,{children:"versions"}),", or ",(0,n.jsx)(t.code,{children:"standout commits"}),". These tags are invaluable for marking specific points in time, often representing the starting points or major achievements in a project's journey."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06uilykiq1ky6dtnr3ez.png",alt:"Git tags"})}),"\n",(0,n.jsx)(t.h3,{id:"head",children:"HEAD"}),"\n",(0,n.jsxs)(t.p,{children:["The most recent commit on the currently checked-out branch is indicated by the ",(0,n.jsx)(t.code,{children:"HEAD"}),", serving as a pointer to any reference within the repository. When you're on a specific branch, ",(0,n.jsx)(t.code,{children:"HEAD"})," points to the latest commit on that branch. Sometimes, instead of pointing to the tip of a branch, ",(0,n.jsx)(t.code,{children:"HEAD"})," can directly point to a specific commit (",(0,n.jsx)(t.code,{children:"detached HEAD"})," state)."]}),"\n",(0,n.jsx)(t.h3,{id:"stages",children:"Stages"}),"\n",(0,n.jsx)(t.p,{children:"Understanding Git stages is crucial for navigating your Git workflow. They represent the logical transitions where changes to your files occur before they are committed to the repository.\r\nLet's delve into the concept of Git stages:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96ndc8w183kh0tcb3uxb.png",alt:"Git stages"})}),"\n",(0,n.jsx)(t.h4,{id:"working-directory-",children:"Working directory \ud83d\udc77"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"working directory"})," is where you edit, modify, and create files for your project. Representing the current state of your files on your local machine."]}),"\n",(0,n.jsx)(t.h4,{id:"staging-area-",children:"Staging area \ud83d\ude89"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"staging"})," area is like a holding area or a pre-commit zone where you prepare your changes before committing them to the repository."]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["Useful command here: ",(0,n.jsx)(t.code,{children:"git add"}),"\r\nAlso ",(0,n.jsx)(t.code,{children:"git rm"})," can be used to unstage changes"]}),"\n"]}),"\n",(0,n.jsx)(t.h4,{id:"local-repository-\ufe0f",children:"Local repository \ud83d\uddc4\ufe0f"}),"\n",(0,n.jsx)(t.p,{children:"The local repository is where Git permanently stores the committed changes. It allows you to review your project's history, revert to previous states, and collaborate with others on the same codebase."}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["You can commit changes that are ready in the staging area with: ",(0,n.jsx)(t.code,{children:"git commit"})]}),"\n"]}),"\n",(0,n.jsx)(t.h4,{id:"remote-repository-",children:"Remote repository \ud83d\udeeb"}),"\n",(0,n.jsx)(t.p,{children:"The remote repository is a centralized location, typically hosted on a server (like GitHub, GitLab, or Bitbucket), where you can share and collaborate with others on your project."}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["You can use commands like ",(0,n.jsx)(t.code,{children:"git push"})," and ",(0,n.jsx)(t.code,{children:"git pull"})," to push/pull your committed changes from your local repository to the remote repository."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"getting-started-with-git",children:"Getting Started with Git"}),"\n",(0,n.jsxs)(t.p,{children:["Well, you have to start somewhere, and in Git that is your ",(0,n.jsx)(t.code,{children:"workspace"}),". You can ",(0,n.jsx)(t.code,{children:"fork"})," or ",(0,n.jsx)(t.code,{children:"clone"})," an existing repository and have a copy of that workspace, or if you are starting completely fresh in a new local folder on your machine you have to turn it into a git repository with ",(0,n.jsx)(t.code,{children:"git init"}),". The next step, crucially not to be overlooked is setting up your credentials."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://li.earthonline.us/",children:(0,n.jsx)(t.img,{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqr8mylqjo91zurb7gmi.png",alt:"Source:  Shuai Li"})})}),"\n",(0,n.jsx)(t.h3,{id:"credentials-set-up",children:"Credentials set up"}),"\n",(0,n.jsx)(t.p,{children:"When running pushing and pulling to a remote repository you don\u2019t want to have to type your username and password every time, avoid that by simply executing the following command:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"git config --global credential.helper store\n"})}),"\n",(0,n.jsx)(t.p,{children:"The first time you interact with the remote repository, Git will prompt you to input your username and password. And after that, you won\u2019t be prompted again"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["It's important to note that the credentials are stored in a plaintext format within a ",(0,n.jsx)(t.code,{children:".git-credentials"})," file."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"To check the configured credentials, you can use the following command:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"git config --global credential.helper\n"})}),"\n",(0,n.jsx)(t.h3,{id:"working-with-branches",children:"Working with branches"}),"\n",(0,n.jsx)(t.p,{children:"When working locally it\u2019s crucial to know which branch you are currently on. These commands are helpful:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"# Will show the changes in the local repository\r\ngit branch\r\n\r\n# Or create a branch directly with\r\ngit branch feature-branch-name\n"})}),"\n",(0,n.jsx)(t.p,{children:"To transition between branches use:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"git switch\n"})}),"\n",(0,n.jsx)(t.p,{children:"Additionally to transitioning between them, you can also use:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"git checkout\r\n# A shortcut to switch to a branch that is yet to be created with the -b flag\r\ngit checkout -b feature-branch-name\n"})}),"\n",(0,n.jsx)(t.p,{children:"To check the repository's state, use:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"git status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["A great way to always have a clear view of your current branch is to see it right in the terminal. Many terminal add-ons can help with this. Here is ",(0,n.jsx)(t.a,{href:"https://gist.github.com/joseluisq/1e96c54fa4e1e5647940",children:"one"}),"."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nycmbxgrtplax7q83g3n.png",alt:"Terminal view"})}),"\n",(0,n.jsx)(t.h3,{id:"working-with-commits",children:"Working with commits"}),"\n",(0,n.jsxs)(t.p,{children:["When working with commits, utilize git commit -m to record changes, git amend to modify the most recent commit, and try your best to adhere to ",(0,n.jsx)(t.a,{href:"https://gist.github.com/qoomon/5dfcdf8eec66a051ecd85625518cfd13",children:"commit message conventions"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'# Make sure to add a message to each commit\r\ngit commit -m "meaningful message"\n'})}),"\n",(0,n.jsx)(t.p,{children:"If you have changes to your last commit, you don\u2019t have to create another commit altogether, you can use the -\u2014amend flag to amend the most recent commit with your staged changes"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"# make your changes\r\ngit add .\r\ngit commit --amend\r\n# This will open your default text editor to modify the commit message if needed.\r\ngit push origin your_branch --force\n"})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["\u26a0\ufe0f Exercise caution when utilizing ",(0,n.jsx)(t.code,{children:"--force"}),", as it has the potential to overwrite the history of the target branch. Its application on the main/master branch should be generally avoided."]}),"\n"]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"As a rule of thumb it's better to commit more often than not, to avoid losing progress or accidentally resetting the unstaged changes. One can rewrite the history afterward by squashing multiple commits or doing an interactive rebase."}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Use ",(0,n.jsx)(t.code,{children:"git log"})," to show a chronological list of commits, starting from the most recent commit and working backward in time"]}),"\n",(0,n.jsx)(t.h2,{id:"manipulating-history",children:"Manipulating History"}),"\n",(0,n.jsxs)(t.p,{children:["Manipulating History involves some powerful commands. ",(0,n.jsx)(t.code,{children:"Rebase"})," rewrites commit history, ",(0,n.jsx)(t.code,{children:"Squashing"})," combines multiple commits into one, and ",(0,n.jsx)(t.code,{children:"Cherry-picking"})," selects specific commits."]}),"\n",(0,n.jsx)(t.h3,{id:"rebasing-and-merging",children:"Rebasing and merging"}),"\n",(0,n.jsx)(t.p,{children:"It makes sense to compare rebasing to merging since their aim is the same but they achieve it in different ways. The crucial difference is that rebasing rewrites the project's history. A desired choice for projects that value clear and easily understandable project history. On the other hand, merging maintains both branch histories by generating a new merge commit."}),"\n",(0,n.jsxs)(t.p,{children:["During a rebase, the commit history of the feature branch is restructured as it's moved onto the ",(0,n.jsx)(t.code,{children:"HEAD"})," of the main branch"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytea832muxycodnkdlma.png",alt:"rebase"})}),"\n",(0,n.jsx)(t.p,{children:"The workflow here is pretty straightforward."}),"\n",(0,n.jsx)(t.p,{children:"Ensure you're on the branch you want to rebase and fetch the latest changes from the remote repository:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"git checkout your_branch\r\ngit fetch\n"})}),"\n",(0,n.jsx)(t.p,{children:"Now choose the branch you want to rebase onto and run this command:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"git rebase upstream_branch\n"})}),"\n",(0,n.jsx)(t.p,{children:"After rebasing, you might need to force-push your changes if the branch has already been pushed to a remote repository:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"git push origin your_branch --force\n"})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["\u26a0\ufe0f Exercise caution when utilizing ",(0,n.jsx)(t.code,{children:"--force"}),", as it has the potential to overwrite the history of the target branch. Its application on the main/master branch should be generally avoided."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"squashing",children:"Squashing"}),"\n",(0,n.jsx)(t.p,{children:"Git squashing is used to condense multiple commits into a single, cohesive commit."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owzri2ufj3meqhtjjpc0.png",alt:"git squashing"})}),"\n",(0,n.jsx)(t.p,{children:"The concept is easy to understand and especially useful if the method of unifying code that is used is rebasing, since the history will be altered, it\u2019s important to be mindful of the effects on the project history. There have been times I have struggled to perform a squash, especially using interactive rebase, luckily we have some tools to help us. This is my preferred method of squashing which involves moving the HEAD pointer back X number of commits while keeping the staged changes."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'# Change to the number after HEAD~ depending on the commits you want to squash\r\ngit reset --soft HEAD~X\r\ngit commit -m "Your squashed commit message"\r\ngit push origin your_branch --force\n'})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["\u26a0\ufe0f Exercise caution when utilizing ",(0,n.jsx)(t.code,{children:"--force"}),", as it has the potential to overwrite the history of the target branch. Its application on the main/master branch should be generally avoided."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"cherry-picking",children:"Cherry-picking"}),"\n",(0,n.jsx)(t.p,{children:"Cherry-picking is useful for selectively incorporating changes from one branch to another, especially when merging entire branches is not desirable or feasible. However, it's important to use cherry-picking judiciously, as it can lead to duplicate commits and divergent histories if misapplied"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxe90o4u26mikikee9f1.png",alt:"Cherry-picking"})}),"\n",(0,n.jsxs)(t.p,{children:["To perform this first you have to identify the commit hash of the commit you would like to pick, you can do this with ",(0,n.jsx)(t.code,{children:"git log"}),".  Once you have the commit hash identified you can run:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"git checkout target_branch\r\ngit cherry-pick <commit-hash> # Do this multiple times if multiple commits are wanted\r\ngit push origin target_branch\n"})}),"\n",(0,n.jsx)(t.h2,{id:"advanced-git-commands",children:"Advanced Git Commands"}),"\n",(0,n.jsx)(t.h3,{id:"signing-commits",children:"Signing commits"}),"\n",(0,n.jsx)(t.p,{children:"Signing commits is a way to verify the authenticity and integrity of your commits in Git. It allows you to cryptographically sign your commits using your GPG (GNU Privacy Guard) key, assuring Git that you are indeed the author of the commit. You can do so by creating a GPG key and configuring Git to use the key when committing.\r\nHere are the steps:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'# Generate a GPG key\r\ngpg --gen-key\r\n\r\n# Configure Git to Use Your GPG Key\r\ngit config --global user.signingkey <your-gpg-key-id>\r\n\r\n# Add the public key to your GitHub account\r\n\r\n# Signing your commits with the -S flag\r\ngit commit -S -m "Your commit message"\r\n\r\n# View signed commits\r\ngit log --show-signature\n'})}),"\n",(0,n.jsx)(t.h3,{id:"git-reflog",children:"Git reflog"}),"\n",(0,n.jsx)(t.p,{children:"A topic that we haven\u2019t explored is Git references, they are pointers to various objects within the repository, primarily commits, but also tags and branches. They serve as named points in the Git history, allowing users to navigate through the repository's timeline and access specific snapshots of the project. Knowing how to navigate git references can be very useful and they can use git reflog to do just that.\r\nHere are some of the benefits:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Recovering lost commits or branches"}),"\n",(0,n.jsx)(t.li,{children:"Debugging and troubleshooting"}),"\n",(0,n.jsx)(t.li,{children:"Undoing mistakes"}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"interactive-rebase",children:"Interactive rebase"}),"\n",(0,n.jsx)(t.p,{children:"Interactive rebase is a powerful Git feature that allows you to rewrite commit history interactively. It enables you to modify, reorder, combine, or delete commits before applying them to a branch."}),"\n",(0,n.jsx)(t.p,{children:"In order to use it you have to become familiar with the possible actions such are:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Pick (\u201cp\u201c)"}),"\n",(0,n.jsx)(t.li,{children:"Reword (\u201cr\u201c)"}),"\n",(0,n.jsx)(t.li,{children:"Edit (\u201ce\u201c)"}),"\n",(0,n.jsx)(t.li,{children:"Squash (\u201cs\u201c)"}),"\n",(0,n.jsx)(t.li,{children:"Drop (\u201cd\u201c)"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98sngs9j2dl5awcmm8dt.png",alt:"Interactive rebase"})}),"\n",(0,n.jsxs)(t.p,{children:["Here is a useful ",(0,n.jsx)(t.a,{href:"https://www.youtube.com/watch?v=qsTthZi23VE",children:"video"})," to learn how to perform an interactive rebase in the terminal, I have also linked a useful tool at the bottom of the blog post."]}),"\n",(0,n.jsx)(t.h2,{id:"collaborating-with-git",children:"Collaborating with Git"}),"\n",(0,n.jsx)(t.h3,{id:"origin-vs-upstream",children:"Origin vs Upstream"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.strong,{children:"origin"}),' is the default remote repository associated with your local Git repository when you clone it. If you\'ve forked a repository, then that fork becomes your "origin" repository by default.']}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Upstream"})," on the other hand refers to the original repository from which your repository was forked."]}),"\n",(0,n.jsxs)(t.p,{children:["To keep your forked repository up-to-date with the latest changes from the original project, you ",(0,n.jsx)(t.code,{children:"git fetch"}),' changes from the "upstream" repository and merge or rebase them into your local repository.']}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"# By pulling the pulled changes will be merged into your working branch\r\ngit pull <remote_name> <branch_name>\r\n# If you don't want to merge the changes use\r\ngit fetch <remote_name>\n"})}),"\n",(0,n.jsx)(t.p,{children:"To see the remote repositories associated with you local Git repo, run:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"git remote -v\n"})}),"\n",(0,n.jsx)(t.h3,{id:"conflicts",children:"Conflicts"}),"\n",(0,n.jsx)(t.p,{children:"Don\u2019t panic, when trying to merge or rebase a branch and conflicts are detected it only means that there are conflicting changes between different versions of the same file or files in your repository and they can be easily resolved (most times)."}),"\n",(0,n.jsx)("p",{align:"center",children:(0,n.jsx)("img",{src:"https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExbXRiM3o5cWd0OGZ3Z2NudGhlb2gyaXhheTRmcGx0bW5sN3UzNXJhYSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/cFkiFMDg3iFoI/giphy.gif"})}),"\n",(0,n.jsxs)(t.p,{children:["They are typically indicated within the affected files, where Git inserts conflict markers ",(0,n.jsx)(t.code,{children:"<<<<<<<"}),", ",(0,n.jsx)(t.code,{children:"======="})," and ",(0,n.jsx)(t.code,{children:">>>>>>>"})," to highlight the conflicting sections.\r\nDecide which changes to keep, modify, or remove, ensuring that the resulting code makes sense and retains the intended functionality."]}),"\n",(0,n.jsxs)(t.p,{children:["After manually resolving conflicts in the conflicted files, remove the conflict markers ",(0,n.jsx)(t.code,{children:"<<<<<<<"}),", ",(0,n.jsx)(t.code,{children:"======="}),", and ",(0,n.jsx)(t.code,{children:">>>>>>>"})," and adjust the code as necessary."]}),"\n",(0,n.jsx)(t.p,{children:"Save the changes in the conflicted files once you're satisfied with the resolution."}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["If you have issues resolving conflicts, this ",(0,n.jsx)(t.a,{href:"https://www.youtube.com/watch?v=xNVM5UxlFSA",children:"video"})," does a good job at explaining it."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"popular-git-workflows",children:"Popular Git workflows"}),"\n",(0,n.jsx)("p",{align:"center",children:(0,n.jsx)("img",{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x955re263jtueig35kyg.png"})}),"\n",(0,n.jsx)(t.p,{children:"Various Git workflows exist, however, it's important to note that there's no universally \"best\" Git workflow. Instead, each approach has its own set of pros and cons. Let's explore these different workflows to understand their strengths and weaknesses."}),"\n",(0,n.jsx)("p",{align:"center",children:(0,n.jsx)("img",{src:"https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExeTY0eTI3anV6YnJ3Y2Y3bzd6ZTE5dHJ6OG9hdDNsM3hwcW1ubHZiMCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/dSetNZo2AJfptAk9hp/giphy.gif"})}),"\n",(0,n.jsx)(t.h3,{id:"feature-branch-workflow-",children:"Feature Branch Workflow \ud83c\udf31"}),"\n",(0,n.jsx)(t.p,{children:"Each new feature or bug fix is developed in its own branch and then merge it back into the main branch once completed by opening a PR."}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Strength"}),": Isolation of changes and reducing conflicts."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Weakness"}),": Can become complex and require diligent branch management."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"gitflow-workflow-",children:"Gitflow Workflow \ud83c\udf0a"}),"\n",(0,n.jsx)(t.p,{children:"Gitflow defines a strict branching model with predefined branches for different types of development tasks."}),"\n",(0,n.jsx)(t.p,{children:"It includes long-lived branches such as main, develop, feature branches, release branches, and hotfix branches."}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Strength"}),": Suitable for projects with scheduled releases and long-term maintenance."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Weakness"}),": Can be overly complex for smaller teams"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"forking-workflow-",children:"Forking Workflow \ud83c\udf74"}),"\n",(0,n.jsx)(t.p,{children:"In this workflow, each developer clones the main repository, but instead of pushing changes directly to it, they push changes to their own fork of the repository. Developers then create pull requests to propose changes to the main repository, allowing for code review and collaboration before merging."}),"\n",(0,n.jsx)(t.p,{children:"This is the workflow we use to collaborate on the open-source Glasskube repos."}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Strength"}),": Encourages collaboration from external contributors without granting direct write access to the main repository."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Weakness"}),": Maintaining synchronization between forks and the main repository can be challenging."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"trunk-based-development-",children:"Trunk-Based Development \ud83e\udeb5"}),"\n",(0,n.jsx)(t.p,{children:"If you are on a team focused on rapid iteration and continuous delivery, you might use trunk-based development which developers work directly on the main branch committing small and frequent changes."}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Strength"}),": Promotes rapid iteration, continuous integration, and a focus on delivering small, frequent changes to production."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Weakness"}),": Requires robust automated testing and deployment pipelines to ensure the stability of the main branch, may not be suitable for projects with stringent release schedules or complex feature development."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"what-the-fork",children:"What the fork?"}),"\n",(0,n.jsx)(t.p,{children:"Forking is highly recommended for collaborating on Open Source projects since you have complete control over your own copy of the repository. You can make changes, experiment with new features, or fix bugs without affecting the original project."}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"\ud83d\udca1 What took me a long time to figure out was that although forked repositories start as separate entities, they retain a connection to the original repository. This connection allows you to keep track of changes in the original project and synchronize your fork with updates made by others."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"That\u2019s why even when you push to your origin repository. Your changes will show up on the remote also."}),"\n",(0,n.jsx)(t.h2,{id:"git-cheatsheet",children:"Git Cheatsheet"}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'# Clone a Repository\r\ngit clone <repository_url>\r\n\r\n# Stage Changes for Commit\r\ngit add <file(s)>\r\n\r\n# Commit Changes\r\ngit commit -m "Commit message"\r\n\r\n# Push Changes to the Remote Repository\r\ngit push\r\n\r\n# Force Push Changes (use with caution)\r\ngit push --force\r\n\r\n# Reset Working Directory to Last Commit\r\ngit reset --hard\r\n\r\n# Create a New Branch\r\ngit branch <branch_name>\r\n\r\n# Switch to a Different Branch\r\ngit checkout <branch_name>\r\n\r\n# Merge Changes from Another Branch\r\ngit merge <branch_name>\r\n\r\n# Rebase Changes onto Another Branch (use with caution)\r\ngit rebase <base_branch>\r\n\r\n# View Status of Working Directory\r\ngit status\r\n\r\n# View Commit History\r\ngit log\r\n\r\n# Undo Last Commit (use with caution)\r\ngit reset --soft HEAD^\r\n\r\n# Discard Changes in Working Directory\r\ngit restore <file(s)>\r\n\r\n# Retrieve Lost Commit References\r\ngit reflog\r\n\r\n# Interactive Rebase to Rearrange Commits\r\ngit rebase --interactive HEAD~3\r\n\r\n# Pull changes from remote repo\r\ngit pull <remote_name> <branch_name>\r\n\r\n# Fetch changes from remote repo\r\ngit fetch <remote_name>\n'})}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:"bonus-some-git-tools-and-resources-to-make-your-life-easier",children:"Bonus! Some Git tools and resources to make your life easier."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://github.com/MitMaro/git-interactive-rebase-tool",children:"Tool"})," for interactive rebasing."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://github.com/amigrave/cdiff",children:"Cdiff"})," to view colorful, incremental diffs."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Interactive Git branching ",(0,n.jsx)(t.a,{href:"https://learngitbranching.js.org/?locale=en_US",children:"playground"})]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.p,{children:"If you like this sort of content and would like to see more of it, please consider supporting us by giving us a Star on GitHub \ud83d\ude4f"}),"\n",(0,n.jsx)("div",{style:{display:"flex",justifyContent:"left"},children:(0,n.jsx)(o.A,{href:"https://github.com/glasskube/glasskube"})}),"\n",(0,n.jsx)(s.Ay,{category:"Guides",categoryId:"DIC_kwDOLDumD84CfK3R"})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(g,{...e})}):g(e)}},51852:(e,t,i)=>{i.d(t,{Ay:()=>a,t2:()=>c});var n=i(96540),r=i(12171),o=i(7710),s=i(74848);function a(e){let{category:t,categoryId:i}=e;const{colorMode:a}=(0,o.G)(),c=e=>{if("https://giscus.app"!==e.origin)return;if("object"!=typeof e.data||!e.data.giscus)return;const t=e.data.giscus;if(t.discussion&&t.viewer){const e=t.viewer.login;if(e.includes("giscus")&&e.includes("bot"))return;const i=t.viewer.url;window.posthog&&window.posthog.setPersonProperties({github_url:i})}};return(0,n.useEffect)((()=>(window.addEventListener("message",c),()=>{window.removeEventListener("message",c)})),[]),(0,s.jsx)(r.A,{repo:"glasskube/glasskube",repoId:"R_kgDOLDumDw",category:t,categoryId:i,mapping:"title",strict:"0",reactionsEnabled:"1",emitMetadata:"1",inputPosition:"top",theme:a,lang:"en",loading:"lazy"})}function c(){return(0,s.jsx)(a,{category:"Blog",categoryId:"DIC_kwDOLDumD84CfCte"})}},24401:(e,t,i)=>{i.d(t,{A:()=>o});i(96540);var n=i(20072),r=i(74848);const o=e=>{let{href:t,...i}=e;return(0,r.jsx)(n.A,{href:t,"data-color-scheme":"no-preference: light; light: light; dark: light;","data-icon":"octicon-star","data-size":"large","data-show-count":"true","aria-label":`Star ${t} on GitHub`,...i,children:"Star"})}}}]);