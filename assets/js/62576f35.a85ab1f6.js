"use strict";(self.webpackChunkglasskube_docs=self.webpackChunkglasskube_docs||[]).push([[2067],{2758:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>h});var s=n(4848),r=n(8453);const a={slug:"5-helm-shortcomings",title:"5 shortcomings of Helm",description:"5 reasons we are trying to build the next generation of deployment automation for Kubernetes.",authors:["pmig","kosmoz"],tags:["glasskube","helm","kubernetes"],image:"https://cms.glasskube.eu/uploads/Goodbyehelm_7c21643ff8.png"},o=void 0,i={permalink:"/TP2024-T5/blog/5-helm-shortcomings",source:"@site/blog/2023-12-14-5-helm-shortcomings/index.mdx",title:"5 shortcomings of Helm",description:"5 reasons we are trying to build the next generation of deployment automation for Kubernetes.",date:"2023-12-14T00:00:00.000Z",tags:[{inline:!0,label:"glasskube",permalink:"/TP2024-T5/blog/tags/glasskube"},{inline:!0,label:"helm",permalink:"/TP2024-T5/blog/tags/helm"},{inline:!0,label:"kubernetes",permalink:"/TP2024-T5/blog/tags/kubernetes"}],readingTime:9.805,hasTruncateMarker:!0,authors:[{name:"Philip Miglinci",title:"Co-Founder",url:"https://www.linkedin.com/in/pmigat/",imageURL:"https://avatars.githubusercontent.com/pmig",key:"pmig",page:null},{name:"Jakob Steiner",title:"Software Engineer",url:"https://github.com/kosmoz",imageURL:"https://avatars.githubusercontent.com/kosmoz",key:"kosmoz",page:null}],frontMatter:{slug:"5-helm-shortcomings",title:"5 shortcomings of Helm",description:"5 reasons we are trying to build the next generation of deployment automation for Kubernetes.",authors:["pmig","kosmoz"],tags:["glasskube","helm","kubernetes"],image:"https://cms.glasskube.eu/uploads/Goodbyehelm_7c21643ff8.png"},unlisted:!1,prevItem:{title:"Glasskube v0.0.1 \u2014 Technical Preview",permalink:"/TP2024-T5/blog/technical-preview"}},l={authorsImageUrls:[void 0,void 0]},h=[{value:"Introduction",id:"introduction",level:2},{value:"5 shortcomings:",id:"5-shortcomings",level:2},{value:"1. Helm doesn&#39;t provide a mechanism for upgrading Custom Resource Definitions",id:"1-helm-doesnt-provide-a-mechanism-for-upgrading-custom-resource-definitions",level:3},{value:"2. Helm dependency management",id:"2-helm-dependency-management",level:3},{value:"3. Helm chart creation is not user-friendly",id:"3-helm-chart-creation-is-not-user-friendly",level:3},{value:"4. The <code>values.yaml</code> file is an anti-pattern",id:"4-the-valuesyaml-file-is-an-anti-pattern",level:3},{value:"5. Inability to interact with the Kubernetes API",id:"5-inability-to-interact-with-the-kubernetes-api",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://cms.glasskube.eu/uploads/Goodbyehelm_7c21643ff8.png",alt:"helm-thumbnail"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"5 reasons we are trying to build the next generation of deployment automation for Kubernetes."})}),"\n",(0,s.jsxs)(t.p,{children:["Glasskube is fully open-source. Support us by leaving a star: ",(0,s.jsxs)(t.a,{href:"https://github.com/glasskube/glasskube/",children:["\u2b50 ",(0,s.jsx)(t.code,{children:"glasskube/glasskube"})," \u2b50"]})]}),"\n",(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(t.p,{children:"As a seasoned DevOps engineer, I found that Helm, the popular Kubernetes deployment tool, has some shocking shortcomings. In this post I want to discuss some of those which, in my opinion, require a new vision of a more modern deployment solution.\r\nIf you never heard about Helm before, in a nutshell it is:"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"A framework for packaging Kubernetes resources (apps) to charts, publish them and let them easily be installed via a command line interface."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The goal of this post is ",(0,s.jsx)(t.em,{children:"not"})," to hate on the smart and talented people who built helm, but maybe we can kindle a productive and healthy discussion about where we need to go as the DevOps industry to stay relevant in the coming years. But to fully understand the following, I think it is important to understand what developments lead us to where we are today.\r\nSo, before we start, let's quickly dive into the history of Helm."]}),"\n",(0,s.jsxs)(t.p,{children:["In 2015, a company called Deis created Helm, a package manager for Kubernetes.\r\nDeis is now part of Azure Kubernetes Service but the original project still exists as ",(0,s.jsx)(t.a,{href:"https://github.com/helm/helm-classic",children:"Helm Classic"}),". At the same time, Google had a project called ",(0,s.jsx)(t.em,{children:"Kubernetes Deployment Manager"}),", which was similar to ",(0,s.jsx)(t.a,{href:"https://cloud.google.com/deployment-manager/docs",children:"Google Deployment Manager"})," but for Kubernetes resources, rather than GCS resources."]}),"\n",(0,s.jsxs)(t.p,{children:["At the beginning of 2016, the two projects decided to merge, which resulted in the release of ",(0,s.jsx)(t.a,{href:"https://v2.helm.sh/",children:"Helm v2"})," later that year.\r\nHelm v2 consists of a client and server component (Helm and tiller, respectively), where the latter was the continuation of the original Kubernetes Deployment Manager project.\r\nTiller was designed to handle deployment states to make it easier for multiple users to use Helm without interfering with each other."]}),"\n",(0,s.jsxs)(t.p,{children:["In 2018, Helm ",(0,s.jsx)(t.a,{href:"https://helm.sh/blog/intro-helm-hub/",children:"launched"})," the Helm Hub as a central place to discover charts which are otherwise found in distributed repositories.\r\nHelm Hub was ",(0,s.jsx)(t.a,{href:"https://helm.sh/blog/helm-hub-moving-to-artifact-hub/",children:"rebranded"})," to ",(0,s.jsx)(t.a,{href:"https://artifacthub.io/",children:"Artifact Hub"})," in 2020."]}),"\n",(0,s.jsx)(t.p,{children:"With the release of Kubernetes 1.6, which had Role Based Access Control (RBAC) enabled by default, production deployments of helm became more difficult, because of the many security policies that were required by tiller.\r\nSo, people started to experiment with a new approach that could do the same thing without requiring a server component, which resulted in the release of Helm v3 in 2019."}),"\n",(0,s.jsxs)(t.p,{children:["As you can see, helm has a very rich history. It became the gold-standard of packaging apps for Kubernetes and is used by DevOps engineers all over the world. But just because helm is the biggest player on the field, it doesn't mean that it is without flaws. ",(0,s.jsx)(t.strong,{children:"So then, why say goodbye to helm?"})]}),"\n",(0,s.jsx)(t.h2,{id:"5-shortcomings",children:"5 shortcomings:"}),"\n",(0,s.jsx)(t.h3,{id:"1-helm-doesnt-provide-a-mechanism-for-upgrading-custom-resource-definitions",children:"1. Helm doesn't provide a mechanism for upgrading Custom Resource Definitions"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"helm"})," does provide a method of packaging Custom Resource Definitions (CRDs) by placing them in a dedicated ",(0,s.jsx)(t.code,{children:"crds"})," directory, but these are ignored during upgrades!\r\n",(0,s.jsx)(t.a,{href:"https://helm.sh/docs/chart_best_practices/custom_resource_definitions/#some-caveats-and-explanations",children:"This is intentional"})," and designed to prevent accidental data loss.\r\nTherefore, upgrading a chart does ",(0,s.jsx)(t.em,{children:"not"})," automatically upgrade it's associated CRDs, which is unexpected for many engineers and leads to more manually involved and error-prone upgrade procedures and other anti-patterns."]}),"\n",(0,s.jsx)(t.p,{children:"To combat this major design flaw, chart developers have come up with several strategies, the most popular of which are:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Putting the CRDs into the chart's ",(0,s.jsx)(t.code,{children:"template"})," directory"]}),"\n",(0,s.jsx)(t.li,{children:"Creating separate sub-charts just for CRDs"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["An alternative way to overcome this shortcoming is to not invoke helm commands directly, but rather use a CI/CD solution, like ",(0,s.jsx)(t.a,{href:"https://github.com/fluxcd/flux2",children:"Flux"}),".\r\nFlux provides a setting to automatically update CRDs during a helm upgrade, but it is ",(0,s.jsx)(t.a,{href:"https://fluxcd.io/flux/components/helm/api/v2beta2/#helm.toolkit.fluxcd.io/v2beta2.CRDsPolicy",children:"off by default"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"2-helm-dependency-management",children:"2. Helm dependency management"}),"\n",(0,s.jsx)(t.p,{children:"The way to specify a dependency in a helm chart is to reference it as a sub-chart.\r\nThis method can work great for tightly coupled dependencies that you might want to install separately or as part of another chart, but it has some weaknesses that are important to understand:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Sub-charts are ",(0,s.jsx)(t.strong,{children:"always installed in the same namespace"})," as the primary release and there is no way to change this."]}),"\n",(0,s.jsxs)(t.li,{children:["There exists ",(0,s.jsx)(t.strong,{children:"no mechanism to share a dependency"})," between two releases."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["For example, our ",(0,s.jsx)(t.a,{href:"https://github.com/glasskube/operator/tree/main/charts/glasskube-operator",children:"Glasskube Operator Helm Chart"})," depends on kube-prometheus-stack, velero and a bunch of other dependencies, some of which are already installed in many Kubernetes clusters.\r\nTo provide an installation experience that is as simple as possible, the chart references all those dependencies as sub-charts, but using this approach, all those dependencies are bundled in the Glasskube ",(0,s.jsx)(t.a,{href:"https://glasskube.eu/de/r/glossar/kubernetes-operator/",children:"Operator"})," release and can not be changed or updated separately.\r\nAdditionally, there is no way to check whether a dependency is already installed, so a user might end up with two separate installations of the same helm chart!"]}),"\n",(0,s.jsx)(t.p,{children:"Ideal tooling would allow chart developers to specify external dependencies and simply ensure that those are present in a cluster before a chart can be installed.\r\nThis way, dependencies could be shared among consumers.\r\nThis is how package managers for operating systems work since forever. Why does Kubernetes need to be different?"}),"\n",(0,s.jsx)(t.h3,{id:"3-helm-chart-creation-is-not-user-friendly",children:"3. Helm chart creation is not user-friendly"}),"\n",(0,s.jsx)(t.p,{children:"So far, we discussed problems that affect you as a chart user.\r\nBut what does the situation look like for chart developers?"}),"\n",(0,s.jsxs)(t.p,{children:["Well, let's start by creating a new chart.\r\nThis can be achieved by calling ",(0,s.jsx)(t.code,{children:"helm create your-chart"}),".\r\nI invite you to quickly open a terminal, run this command and go through all the files it creates.\r\nAs I'm sure you will agree, it's\u2026 a ",(0,s.jsx)(t.em,{children:"lot"}),".\r\nI still remember the moment when I wanted to create my first helm chart and saw the results of this command thinking, \u201cthis can't be right.\u201d"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:".:\r\ntotal 8,0K\r\ndrwxr-xr-x. 2 kosmoz kosmoz   40  7. Dez 13:23 charts/\r\n-rw-r--r--. 1 kosmoz kosmoz 1,2K  7. Dez 13:23 Chart.yaml\r\ndrwxr-xr-x. 3 kosmoz kosmoz  200  7. Dez 13:23 templates/\r\n-rw-r--r--. 1 kosmoz kosmoz 1,9K  7. Dez 13:23 values.yaml\r\n\r\n./charts:\r\ntotal 0\r\n\r\n./templates:\r\ntotal 28K\r\n-rw-r--r--. 1 kosmoz kosmoz 1,9K  7. Dez 13:23 deployment.yaml\r\n-rw-r--r--. 1 kosmoz kosmoz 1,8K  7. Dez 13:23 _helpers.tpl\r\n-rw-r--r--. 1 kosmoz kosmoz  925  7. Dez 13:23 hpa.yaml\r\n-rw-r--r--. 1 kosmoz kosmoz 2,1K  7. Dez 13:23 ingress.yaml\r\n-rw-r--r--. 1 kosmoz kosmoz 1,8K  7. Dez 13:23 NOTES.txt\r\n-rw-r--r--. 1 kosmoz kosmoz  326  7. Dez 13:23 serviceaccount.yaml\r\n-rw-r--r--. 1 kosmoz kosmoz  370  7. Dez 13:23 service.yaml\r\ndrwxr-xr-x. 2 kosmoz kosmoz   60  7. Dez 13:23 tests/\r\n\r\n./templates/tests:\r\ntotal 4,0K\r\n-rw-r--r--. 1 kosmoz kosmoz 388  7. Dez 13:23 test-connection.yaml\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In total, ",(0,s.jsx)(t.code,{children:"helm create"})," generates 10 files in different sub-directories and it is not immediately apparent which ones of those are actually essential for a chart and which ones are just example code.\r\nI once complained about this to a DevOps engineer who had already created dozens of charts and they laughed and said:"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["\u201cThe first step in creating a chart is running ",(0,s.jsx)(t.code,{children:"helm create"}),". The second is deleting 90% of the results.\u201d"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Really? That's the best we can do?\r\nOkay, let's accept that and say you figured out the structure of your new chart.\r\nNow, you probably want to add some resources.\r\nOf course, you can just drop your existing YAML files into the chart's ",(0,s.jsx)(t.code,{children:"templates"})," directory, but you're probably interested in using some parameters from your ",(0,s.jsx)(t.code,{children:"values.yaml"})," in your resources.\r\nAfter all, that would kind of be the point of creating a helm chart in the first place.\r\nTo look at an example, go back to your terminal (where, previously, you created your helm chart) and check out the file ",(0,s.jsx)(t.code,{children:"templates/serviceaccount.yaml"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'{{- if .Values.serviceAccount.create -}}\r\napiVersion: v1\r\nkind: ServiceAccount\r\nmetadata:\r\n  name: {{ include "your-chart.serviceAccountName" . }}\r\n  labels:\r\n    {{- include "your-chart.labels" . | nindent 4 }}\r\n  {{- with .Values.serviceAccount.annotations }}\r\n  annotations:\r\n    {{- toYaml . | nindent 4 }}\r\n  {{- end }}\r\n{{- end }}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Now, I know what you're thinking:"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["That doesn't look like the YAML I know!\r\nWhat is ' ",(0,s.jsx)(t.code,{children:"include"}),", ",(0,s.jsx)(t.code,{children:"toYaml"})," and ",(0,s.jsx)(t.code,{children:"nindent"})," and what's up with all the ",(0,s.jsx)(t.code,{children:"-"})," and ",(0,s.jsx)(t.code,{children:"{{"})," and ",(0,s.jsx)(t.code,{children:"|"}),"?"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"It's true, although helm template files use the file name extension for YAML, they are actually just templates.\r\nHelm templates are based on the Go template language which is very flexible and powerful but doesn't really know anything about YAML or Kubernetes.\r\nThat's why it's necessary to call lots of these conversion functions inside the template files."}),"\n",(0,s.jsx)(t.p,{children:"As a result many popular charts end up with template files that contain more template language stuff than actual YAML.\r\nThis makes them hard to read and maintain, especially as someone who wasn't involved in its creation."}),"\n",(0,s.jsxs)(t.h3,{id:"4-the-valuesyaml-file-is-an-anti-pattern",children:["4. The ",(0,s.jsx)(t.code,{children:"values.yaml"})," file is an anti-pattern"]}),"\n",(0,s.jsxs)(t.p,{children:["Now, let's go back to something that's a little more tangible for you as a helm user.\r\nAs a Kubernetes application developer who writes resources as YAML files, you are probably used to having rich support in your development environment, including strict schema validation and super comprehensive autocomplete.\r\nCreating a ",(0,s.jsx)(t.code,{children:"values.yaml"})," file for a chart release is a little different.\r\nSee, there is no general schema for what goes and doesn't go inside a ",(0,s.jsx)(t.code,{children:"values.yaml"})," file.\r\nThus, your development environment cannot help you beyond basic YAML syntax highlighting.\r\nThe only way to verify if your ",(0,s.jsx)(t.code,{children:"values.yaml"})," file is valid is to run it through helm and see what happens.\r\nUsing ",(0,s.jsx)(t.code,{children:"helm template"})," allows you to render these helm templates which detects possible errors in the configuration file."]}),"\n",(0,s.jsx)(t.p,{children:"A lot of chart developers want to give users the possibility to fine tune most aspects of final deployment.\r\nAs a result, the number of possibilities for configuration is often unreasonably large and complicated, mimicking the actual resources they want to create, but without any schema validation!"}),"\n",(0,s.jsx)(t.h3,{id:"5-inability-to-interact-with-the-kubernetes-api",children:"5. Inability to interact with the Kubernetes API"}),"\n",(0,s.jsxs)(t.p,{children:["We already discussed 4 shortcomings of helm, but in my opinion the biggest downside of helm is this:\r\nA helm release is strictly a one-shot operation.\r\nOnce a helm release is successfully installed, helm's job is done.\r\nBut here's the thing: ",(0,s.jsx)(t.strong,{children:"Installing an application is usually not the hard part, maintaining an installation and keeping it running is"}),".\r\nUnfortunately, helm doesn't really help you with that."]}),"\n",(0,s.jsxs)(t.p,{children:["After finishing installation of a release, helm can not perform any additional changes due to its design as a strictly client-side application.\r\nThis inability to interact with the release during later stages of a release's life-cycle means that ",(0,s.jsx)(t.strong,{children:"helm as a deployment method inherently static"}),", but modern software deployments are often required to be very dynamic."]}),"\n",(0,s.jsxs)(t.p,{children:["A simple example that an ",(0,s.jsx)(t.a,{href:"https://glasskube.eu/de/r/glossar/kubernetes-operator/",children:"Operator"})," can do, but helm can't would be setting the Ingress class and annotations dynamically based on the detected Kubernetes environment:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Detecting the cloud environment:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-kotlin",children:'private val dynamicCloudProvider\r\n    get() = when {\r\n        kubernetesClient.configMaps().inNamespace("kube-system").withName("shoot-info")\r\n            .get()?.data?.get("extensions")?.contains("shoot-dns-service") == true ->\r\n            CloudProvider.gardener\r\n\r\n        kubernetesClient.nodes().withLabel("eks.amazonaws.com/nodegroup").list().items.isNotEmpty() ->\r\n            CloudProvider.aws\r\n\r\n        kubernetesClient.nodes().withLabel("csi.hetzner.cloud/location").list().items.isNotEmpty() ->\r\n            CloudProvider.hcloud\r\n\r\n        else ->\r\n            CloudProvider.generic\r\n    }\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Applying configurations based on the environment:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-kotlin",children:'protected val defaultIngressClassName: String?\r\n    get() = when (configService.cloudProvider) {\r\n        CloudProvider.aws -> "alb"\r\n        else -> configService.ingressClassName\r\n    }\r\n\r\nprotected fun getDefaultAnnotations(primary: P, context: Context<P>): Map<String, String> =\r\n    configService.getCommonIngressAnnotations(primary) +\r\n        when (configService.cloudProvider) {\r\n            CloudProvider.aws -> awsDefaultAnnotations\r\n            CloudProvider.gardener -> gardenerDefaultAnnotations\r\n            else -> getCertManagerDefaultAnnotations(context) + ingressNginxDefaultAnnotations\n'})}),"\n",(0,s.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(t.p,{children:"Although many developers are a bit scared of helm at first, its simple design gave helm the lead it currently holds in the space of Kubernetes deployment methods.\r\nHelm is currently the de-facto standard for managing complex application deployments, but that doesn't mean we shouldn't challenge its design and point out shortcomings.\r\nNew requirements for applications will require more dynamic deployment methods and we DevOps engineers and application developers must be prepared."}),"\n",(0,s.jsxs)(t.p,{children:["This is why we started Glasskube: An easier way to deploy applications and infrastructure on Kubernetes with Glasskube ",(0,s.jsx)(t.a,{href:"https://github.com/glasskube/glasskube",children:(0,s.jsx)(t.code,{children:"glasskube/glasskube"})}),"."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.strong,{children:["If you want to follow our progress make sure to star  ",(0,s.jsx)(t.a,{href:"https://github.com/glasskube/glasskube",children:(0,s.jsx)(t.code,{children:"glasskube/glasskube"})})," and join our ",(0,s.jsx)(t.a,{href:"https://discord.gg/j9A7epEeg2",children:(0,s.jsx)(t.code,{children:"Discord"})}),"."]})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(6540);const r={},a=s.createContext(r);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);