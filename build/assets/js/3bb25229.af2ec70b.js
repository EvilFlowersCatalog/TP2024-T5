"use strict";(self.webpackChunkglasskube_docs=self.webpackChunkglasskube_docs||[]).push([[1410],{2563:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=t(4848),r=t(8453);const o={slug:"kubernetes-frontends",title:"The Inner Workings of Kubernetes Management Frontends \u2014 A Software Engineer\u2019s Perspective",description:"Analyzing Code and Architecture of Kubernetes Management Frontends \u2014 How to build and deploy tools like ArgoCD and glasskube.",authors:["christophenne"],tags:["glasskube","kubernetes","frontends"],image:"https://github.com/user-attachments/assets/e6836ba6-6201-4f34-b7ba-981dfbd13dcc"},i="The Inner Workings of Kubernetes Management Frontends \u2014 A Software Engineer\u2019s Perspective",a={permalink:"/blog/kubernetes-frontends",source:"@site/blog/2024-02-14-kubernetes-frontends/index.mdx",title:"The Inner Workings of Kubernetes Management Frontends \u2014 A Software Engineer\u2019s Perspective",description:"Analyzing Code and Architecture of Kubernetes Management Frontends \u2014 How to build and deploy tools like ArgoCD and glasskube.",date:"2024-02-14T00:00:00.000Z",tags:[{inline:!0,label:"glasskube",permalink:"/blog/tags/glasskube"},{inline:!0,label:"kubernetes",permalink:"/blog/tags/kubernetes"},{inline:!0,label:"frontends",permalink:"/blog/tags/frontends"}],readingTime:10.035,hasTruncateMarker:!0,authors:[{name:"Christoph Enne",title:"Software Engineer",url:"https://github.com/christophenne/",imageURL:"https://avatars.githubusercontent.com/christophenne",key:"christophenne",page:null}],frontMatter:{slug:"kubernetes-frontends",title:"The Inner Workings of Kubernetes Management Frontends \u2014 A Software Engineer\u2019s Perspective",description:"Analyzing Code and Architecture of Kubernetes Management Frontends \u2014 How to build and deploy tools like ArgoCD and glasskube.",authors:["christophenne"],tags:["glasskube","kubernetes","frontends"],image:"https://github.com/user-attachments/assets/e6836ba6-6201-4f34-b7ba-981dfbd13dcc"},unlisted:!1,prevItem:{title:"Glasskube v0.0.3 \u2014 Introducing Package Updates",permalink:"/blog/package-updates"},nextItem:{title:"Glasskube v0.0.2 \u2014 Open Command",permalink:"/blog/open-command"}},l={authorsImageUrls:[void 0]},c=[{value:"Kubernetes Basics",id:"kubernetes-basics",level:2},{value:"Management Frontends",id:"management-frontends",level:2},{value:"kubernetes-dashboard",id:"kubernetes-dashboard",level:3},{value:"ArgoCD",id:"argocd",level:3},{value:"Lens",id:"lens",level:3},{value:"glasskube",id:"glasskube",level:3},{value:"Findings",id:"findings",level:2},{value:"Inside cluster vs. Out of cluster",id:"inside-cluster-vs-out-of-cluster",level:3},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/user-attachments/assets/e6836ba6-6201-4f34-b7ba-981dfbd13dcc",alt:"Inner workings thumbnail"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"In this blogpost we are reviewing Kubernetes Management Frontends and discuss how these tools are being built."})}),"\n",(0,s.jsx)(n.p,{children:"The rise of Kubernetes in recent years has led to an astonishing number of open-source Kubernetes management tools seemingly appearing out of nowhere.\r\nThe goal of the research leading to this article was to merely understand the architecture of some of these tools and to subsequently provide a brief overview\r\nand options for developers trying to get started with their own Kubernetes frontend.\r\nWe will not dive deep into the actual tools and what problems they are trying to solve, but instead focus on the software engineering aspect.\r\nWe are also exclusively exploring open-source and self-hosted tools and leaving the PaaS/IaaS platforms of cloud providers aside \u2014 that would be a whole different article."}),"\n",(0,s.jsxs)(n.p,{children:["Setting up and interacting with your first cluster can be overwhelming. Just like me, you might have come across the infamous ",(0,s.jsx)(n.a,{href:"https://github.com/kubernetes/dashboard",children:(0,s.jsx)(n.code,{children:"kubernetes/dashboard"})}),',\r\nfollowed the installation instructions, and asked yourself: "What did I just do and why exactly does this work the way it works?"\r\nAnd after some tinkering with your cluster, you might have installed even more external tools that help you with some specific aspects of cluster management,\r\nproviding you with either a CLI or a Web UI.']}),"\n",(0,s.jsx)(n.p,{children:"As a software engineer mostly engaged in web development in recent years, I was curious about how these kinds of tools are built and deployed."}),"\n",(0,s.jsx)(n.p,{children:"Let's first clarify some of the basics needed for the following exploration of different Kubernetes UIs. After that, we will see what they have in common and what makes this kind of software special, to finally form a recommendation of how one could build a Kubernetes Web UI themselves."}),"\n",(0,s.jsx)(n.h2,{id:"kubernetes-basics",children:"Kubernetes Basics"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/overview/components/",children:"official documentation"})," is more than helpful anyway; there is just one important thing to remember:\r\nWhenever and wherever you interact with your cluster, you do it via the Kubernetes API \u2014 this holds true at least for the scope of this article,\r\nthough there might be other use cases."]}),"\n",(0,s.jsx)(n.p,{children:"As a consumer of this API, one needs to know where it is hosted and how to authenticate against it.\r\nThe Kubernetes API can be accessed both from inside a cluster (i.e., from an application running on a pod) and outside a cluster (e.g., from your command line). In some cases however, the API is only available from within a VPN."}),"\n",(0,s.jsx)(n.p,{children:"Since we are looking at tools with a web UI, this UI and its backend need to be exposed such that a user can access it. The options are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["using ",(0,s.jsx)(n.code,{children:"kubectl proxy"})," to open a proxy from the local machine to the cluster (see ",(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/tasks/access-application-cluster/access-cluster/",children:"Accessing Clusters"}),"),"]}),"\n",(0,s.jsxs)(n.li,{children:["using ",(0,s.jsx)(n.code,{children:"kubectl port-forward"})," to forward a local port to a specific pod of the cluster (see ",(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/",children:"Use Port Forwarding to Access Applications in a Cluster"}),"),"]}),"\n",(0,s.jsxs)(n.li,{children:["using a Kubernetes service of the type ",(0,s.jsx)(n.code,{children:"LoadBalancer"})," to access an application of the cluster (see ",(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/tasks/access-application-cluster/service-access-application-cluster/",children:"Use a Service to Access an Application in a Cluster"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Alternatively, the web server could be running on the local machine of a user as well, in which case one doesn't need to worry about these options.\r\nHowever, a user needs to have a valid kube config on their machine for any of these approaches to work."}),"\n",(0,s.jsx)(n.h2,{id:"management-frontends",children:"Management Frontends"}),"\n",(0,s.jsx)(n.p,{children:"Now, let's take a look at some commonly used frontends and how they are built."}),"\n",(0,s.jsx)(n.h3,{id:"kubernetes-dashboard",children:(0,s.jsx)(n.a,{href:"https://github.com/kubernetes/dashboard",children:"kubernetes-dashboard"})}),"\n",(0,s.jsxs)(n.p,{children:["The Kubernetes Dashboard is a popular Web UI used to view and manage all kinds of Kubernetes resources within a cluster.\r\nIn the latest stable version 2.7, both the backend and frontend are part of the same container. The Go backend serves both the API and the Angular UI assets.\r\nThis deployment strategy requires users to use ",(0,s.jsx)(n.code,{children:"kubectl proxy"})," to access the web application."]}),"\n",(0,s.jsxs)(n.p,{children:["In the newer 3.0 version, which is still in alpha, the deployment strategy has changed: both the backend and frontend are each running in a dedicated container.\r\nTherefore, accessing it via ",(0,s.jsx)(n.code,{children:"kubectl proxy"})," no longer works because the UI needs to access the backend, which is running on a different pod and port.\r\nThe port-forwarding approach described ",(0,s.jsx)(n.a,{href:"https://github.com/kubernetes/dashboard/blob/master/docs/user/accessing-dashboard/README.md",children:"here"})," should be used instead."]}),"\n",(0,s.jsx)(n.h3,{id:"argocd",children:(0,s.jsx)(n.a,{href:"https://github.com/argoproj/argo-cd",children:"ArgoCD"})}),"\n",(0,s.jsx)(n.p,{children:"ArgoCD is a GitOps continuous delivery tool for Kubernetes. It comes with several components, including its own API server and a web UI.\r\nAll the backend components are written in Go, and the UI is a React application."}),"\n",(0,s.jsxs)(n.p,{children:["As with the Kubernetes Dashboard, the server (including the UI assets) is deployed inside the cluster, making it necessary for the user to perform port-forwarding or use a LoadBalancer.\r\nThis is described in their ",(0,s.jsx)(n.a,{href:"https://argo-cd.readthedocs.io/en/stable/getting_started/#3-access-the-argo-cd-api-server",children:"documentation"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"lens",children:(0,s.jsx)(n.a,{href:"https://github.com/lensapp/lens",children:"Lens"})}),"\n",(0,s.jsx)(n.p,{children:"Lens is a Desktop UI, but still interesting for our exploration. It is being developed with Electron, React, and Typescript.\r\nThe Lens App uses the Typescript Kubernetes client to connect to a cluster, and since the Desktop app is clearly running outside a cluster,\r\nit uses a locally provided kubeconfig to connect to it."}),"\n",(0,s.jsx)(n.h3,{id:"glasskube",children:(0,s.jsx)(n.a,{href:"https://github.com/glasskube/glasskube",children:"glasskube"})}),"\n",(0,s.jsx)(n.p,{children:"Yes, a pretty shameless plug (I work there), but it's also an interesting alternative to consider. For the UI of the Glasskube package manager, we spin up the web server\r\nlocally via a CLI command and serve the UI assets from there. We decided to go this route because it simply makes more sense in our use case.\r\nWhenever the user needs the Glasskube UI, they host it themselves for as long or as short as they want \u2014 there is no need to have it running 24/7 inside the cluster."}),"\n",(0,s.jsx)(n.h2,{id:"findings",children:"Findings"}),"\n",(0,s.jsx)(n.p,{children:"Many open-source Kubernetes management UIs are coded in a similar way \u2014 with a Go backend utilizing the powerful Kubernetes-go client, and a Single Page Application in JavaScript as the frontend.\r\nIn most cases, the web assets (e.g., JS files) are served together with the backend, meaning one container serves both the backend and frontend.\r\nIt was actually difficult to find something that is not built like that."}),"\n",(0,s.jsx)(n.h3,{id:"inside-cluster-vs-out-of-cluster",children:"Inside cluster vs. Out of cluster"}),"\n",(0,s.jsx)(n.p,{children:"When it comes to deploying such a web tool, there are only two options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The webserver is deployed on a pod inside the cluster and is accessible either via proxy, port-forwarding, or ingress."}),"\n",(0,s.jsx)(n.li,{children:"The webserver is deployed outside the cluster, directly (locally) on the users' machine."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The Kubernetes clients (e.g., ",(0,s.jsx)(n.a,{href:"https://github.com/kubernetes/client-go",children:"Go client"}),") support developers with both methods to connect to a cluster, as we can see in the following examples."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"The piece of code it all comes down to:"})}),"\n",(0,s.jsxs)(n.p,{children:["These simplified examples are heavily based on the official examples seen ",(0,s.jsx)(n.a,{href:"https://github.com/kubernetes/client-go/blob/v0.29.0/examples/in-cluster-client-configuration/README.md",children:"here"})," and ",(0,s.jsx)(n.a,{href:"https://github.com/kubernetes/client-go/blob/v0.29.0/examples/out-of-cluster-client-configuration/README.md",children:"here"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Let's have a look at how to connect to the Kubernetes API when running the application inside the cluster:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Go",children:'import (\r\n\t"context"\r\n\r\n\tmetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"\r\n\t"k8s.io/client-go/kubernetes"\r\n\t"k8s.io/client-go/rest"\r\n)\r\n\r\nfunc main() {\r\n\t// retreive the config for the cluster we are currently in:\r\n\tconfig, err := rest.InClusterConfig()\r\n\tif err != nil {\r\n\t\tpanic(err.Error())\r\n\t}\r\n\r\n\t// create the clientset for this config:\r\n\tclientset, err := kubernetes.NewForConfig(config)\r\n\tif err != nil {\r\n\t\tpanic(err.Error())\r\n\t}\r\n\r\n\t// do something with the clientset, e.g. getting all pods in the cluster:\r\n\t// pods, err := clientset.CoreV1().Pods("").List(context.TODO(), metav1.ListOptions{})\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The Go client implementation uses the ",(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",children:"pod's service account"})," and the environment variables ",(0,s.jsx)(n.code,{children:"KUBERNETES_SERVICE_HOST"})," and ",(0,s.jsx)(n.code,{children:"KUBERNETES_SERVICE_PORT"})," to\r\nidentify which cluster it is placed in. Subsequently, it creates the REST config object, with which the clientset can be obtained."]}),"\n",(0,s.jsx)(n.p,{children:"Similarly, when running outside the cluster, one needs to create the config object, but this config is read from the local kube config:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Go",children:'import (\r\n\t"context"\r\n\t"flag"\r\n\t"path/filepath"\r\n\r\n\tmetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"\r\n\t"k8s.io/client-go/kubernetes"\r\n\t"k8s.io/client-go/tools/clientcmd"\r\n\t"k8s.io/client-go/util/homedir"\r\n)\r\n\r\nfunc main() {\r\n\t// get the passed (or default) kube config file path\r\n\tvar kubeconfig *string\r\n\tif home := homedir.HomeDir(); home != "" {\r\n\t\tkubeconfig = flag.String("kubeconfig", filepath.Join(home, ".kube", "config"), "(optional) absolute path to the kubeconfig file")\r\n\t} else {\r\n\t\tkubeconfig = flag.String("kubeconfig", "", "absolute path to the kubeconfig file")\r\n\t}\r\n\tflag.Parse()\r\n\r\n\tconfig, err := clientcmd.BuildConfigFromFlags("", *kubeconfig)\r\n\tif err != nil {\r\n\t\tpanic(err.Error())\r\n\t}\r\n\r\n\tclientset, err := kubernetes.NewForConfig(config)\r\n\tif err != nil {\r\n\t\tpanic(err.Error())\r\n\t}\r\n\r\n\t// do something with the clientset, e.g. getting all pods in the cluster:\r\n\t// pods, err := clientset.CoreV1().Pods("").List(context.TODO(), metav1.ListOptions{})\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Again, the Kubernetes Go client has us covered with a simple function to parse a kubeconfig file to get a config, which can then be used to create a clientset."}),"\n",(0,s.jsx)(n.p,{children:"When trying to run these simple examples, you will also come across one difference between these two approaches:\r\nRunning the local tool is easier because you don't need to build an image, push it to a registry, and then pull it into the cluster."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Which one to choose?"})}),"\n",(0,s.jsx)(n.p,{children:"Say you were to build your own Kubernetes UI in a similar fashion. When it comes to the decision of where the webserver of your tool should run, there are several things to consider:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Distribution"}),": Running your tool inside the cluster means you have to build and distribute a docker image. On the contrary, you will have to distribute a native binary if you want users to install it on their machines. For both cases, there are lots of tools and resources online."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Availability"}),": When your cluster is down for whatever reason, users might not be able to reach the tool hosted inside the cluster. This leads us to the next point:"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Onboarding User Experience"}),": This might be an edge case, but a locally hosted web tool is available before all of its components are installed in the cluster. This means you could implement some sort of UI onboarding flow for new users, making the tool easier to install and set up."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compatibility"}),": Multiple users of the same cluster could have different versions of your (locally hosted) tool installed. This can not happen if there is just one webserver running inside the cluster."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Persistence"}),": When needing to store tool-specific data (i.e., non-Kubernetes resources), you could store it inside the cluster (e.g., in a ",(0,s.jsx)(n.code,{children:"ConfigMap"}),"). For the locally deployed variant, you could additionally store user-specific data like settings on the users' machine. This decision is highly use case dependent."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Developer Experience"}),": There seems to be no significant difference, but it is worth noting that when developing an in-cluster webserver, during development this server still needs to support the out-of-cluster config approach somehow. Otherwise, one would have to build and deploy an image into the cluster after every change."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Eventually, whether the tool is deployed inside or outside of the cluster is completely up to you, but it's always important to consider the use cases and be aware of the context in which it is used. You can also opt for providing both options to your users."}),"\n",(0,s.jsx)(n.p,{children:"For us at Glasskube, it was clear that we want to provide an easy-to-use interface for new users (especially those new to the Kubernetes world), who might not have yet set up all the Glasskube cluster components. These users can be supported by having a CLI command hosting the local webserver with a supportive Web UI."}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"In this article, we have explored a few Kubernetes tools offering a web UI and analyzed the web aspect of those tools from a software engineer's point of view.\r\nThere is clearly no ultimate one-size-fits-all solution for how to design and develop such tools, but the list above hopefully gives some hints in the right direction.\r\nAs always in software engineering: It depends."}),"\n",(0,s.jsxs)(n.p,{children:["One more plug: I work at Glasskube, where we are building the missing Kubernetes package manager.\r\nIf you are interested in our work, make sure to star us: ",(0,s.jsx)(n.a,{href:"https://github.com/glasskube/glasskube",children:(0,s.jsx)(n.code,{children:"glasskube/glasskube"})}),".\r\nWe are also working on an article shedding some light on different CLI frameworks, if you are more of a command line person. And if that's not enough, we might write about using htmx soon because it's trending, and we need your attention.\r\nI can already see the headline: \"How we reduce our codebase by 95% by using seemingly old-school technology\" \u2014 I think this has not been done before ;)"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);